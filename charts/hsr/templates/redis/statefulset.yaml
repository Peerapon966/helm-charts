{{- if .Values.redis.useLocal }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "hsr.name" . }}-redis
spec:
  serviceName: {{ include "hsr.name" . }}-redis
  replicas: {{ int .Values.redis.replicas }}
  selector:
    matchLabels:
      app: {{ include "hsr.name" . }}-redis
  template:
    metadata:
      labels:
        app: {{ include "hsr.name" . }}-redis
    spec:
      {{- if .Values.redis.allowControlPlane }}
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
      {{- end }}
      containers:
        - name: redis
          image: {{ printf "redis:%s" (default "latest" .Values.redis.version) }}
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: data
              mountPath: /data
          command: [ "sh", "-c" ]
          args:
            - |
              if [ "$(hostname)" = "${PREFIX}-redis-0" ]; then
                echo "Starting as primary"
                exec redis-server \
                  --appendonly yes \
                  --requirepass "$REDIS_PASSWORD" \
                  --save 60 1 \
                  --loglevel warning
              else
                echo "Starting as replica of ${PREFIX}-redis-0"
                exec redis-server \
                  --appendonly yes \
                  --requirepass "$REDIS_PASSWORD" \
                  --masterauth "$REDIS_PASSWORD" \
                  --save 60 1 \
                  --loglevel warning \
                  --replicaof "${PREFIX}-redis-0.${PREFIX}-redis.${NAMESPACE}.svc.cluster.local 6379"
              fi
          envFrom:
            - secretRef:
                name: {{ include "hsr.name" . }}-redis
          env:
            - name: NAMESPACE
              value: {{ .Values.namespace }}
            - name: PREFIX
              value: {{ include "hsr.name" . }}
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "1000m"
              memory: "2Gi"
      terminationGracePeriodSeconds: 10
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.redis.storageSize }}Gi
{{- end }}